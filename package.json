{
    "name": "karate-ide",
    "displayName": "Karate IDE",
    "description": "[Not Official] Explore your APIs and debug Karate test scripts within VS Code",
    "icon": "resources/karate.png",
    "version": "0.5.1",
    "license": "MIT",
    "publisher": "KarateIDE",
    "bugs": {
        "url": "https://github.com/ivangsa/karate-ide/issues"
    },
    "homepage": "https://github.com/ivangsa/karate-ide/blob/master/README.md",
    "repository": {
        "type": "git",
        "url": "https://github.com/ivangsa/karate-ide.git"
    },
    "author": {
        "name": "Iván García Sainz-Aja",
        "email": "ivangsa@gmail.com",
        "url": "https://github.com/ivangsa"
    },
    "engines": {
        "vscode": "^1.52.0"
    },
    "categories": [
        "Other"
    ],
    "keywords": [
        "karate",
        "test",
        "rest",
        "api"
    ],
    "activationEvents": [
        "*"
    ],
    "main": "./dist/extension.js",
    "scripts": {
        "vscode:prepublish": "npm run clean && npm run package",
        "clean": "rimraf dist/",
        "compile": "webpack",
        "watch": "webpack --watch",
        "package": "webpack --mode production --devtool hidden-source-map",
        "test-compile": "tsc -p ./test",
        "test-watch": "tsc -watch -p ./test",
        "pretest": "npm run test-compile && npm run lint",
        "prettier:format": "prettier --write \"{,src/**/,test/**}*.{js,ts}\"",
        "lint": "eslint src --ext ts",
        "test": "ts-mocha test/**/*.spec.ts"
    },
    "dependencies": {
        "@apidevtools/json-schema-ref-parser": "^9.0.7",
        "@types/lodash": "^4.14.168",
        "deepmerge": "^4.2.2",
        "ejs": "^3.1.5",
        "fs-extra": "^9.1.0",
        "js-yaml": "^4.0.0",
        "json-schema": "^0.3.0",
        "lodash": "^4.17.20",
        "minimatch": "^3.0.4",
        "mkdirp": "^1.0.4",
        "parse-curl": "0.2.6",
        "rimraf": "^3.0.2"
    },
    "devDependencies": {
        "@types/chai": "^4.2.14",
        "@types/glob": "^7.1.1",
        "@types/mocha": "^5.2.7",
        "@types/node": "^12.6.9",
        "@types/vscode": "^1.44.0",
        "@typescript-eslint/eslint-plugin": "^4.14.1",
        "@typescript-eslint/parser": "^4.14.1",
        "chai": "^4.2.0",
        "eslint": "^7.19.0",
        "file-loader": "^6.2.0",
        "glob": "^7.1.6",
        "mocha": "^8.2.1",
        "prettier": "^2.2.1",
        "ts-loader": "^8.0.14",
        "ts-mocha": "^8.0.0",
        "typescript": "^4.1.3",
        "vscode-test": "^1.5.0",
        "webpack": "^5.19.0",
        "webpack-cli": "^4.5.0"
    },
    "contributes": {
        "viewsContainers": {
            "activitybar": [
                {
                    "id": "karate-ide",
                    "title": "Karate IDE",
                    "icon": "resources/karate-icons/karate-activitybar.svg"
                }
            ]
        },
        "views": {
            "karate-ide": [
                {
                    "id": "karate-tests",
                    "name": "Karate Tests"
                },
                {
                    "id": "karate-executions",
                    "name": "Executions"
                },
                {
                    "id": "karate-network-logs",
                    "name": "Network Logs"
                }
            ]
        },
        "commands": [
            {
                "command": "karateIDE.paste",
                "title": "Karate Smart Paste"
            },
            {
                "command": "karateIDE.tests.run",
                "title": "Run Karate Test",
                "icon": {
                    "light": "resources/vscode-icons/light/run.svg",
                    "dark": "resources/vscode-icons/dark/run.svg"
                }
            },
            {
                "command": "karateIDE.tests.debug",
                "title": "Debug Karate Test",
                "icon": {
                    "light": "resources/vscode-icons/light/debug-alt-small.svg",
                    "dark": "resources/vscode-icons/dark/debug-alt-small.svg"
                }
            },
            {
                "command": "karateIDE.karateCli.debugCommand",
                "title": "Returns processed 'karateIDE.karateCli.debugCommandTemplate' config"
            },
            {
                "command": "karateIDE.karateExecutionsTree.clearTree",
                "title": "Clear",
                "icon": {
                    "light": "resources/vscode-icons/light/clear-all.svg",
                    "dark": "resources/vscode-icons/dark/clear-all.svg"
                }
            },
            {
                "command": "karateIDE.karateNetworkLogs.clearTree",
                "title": "Clear",
                "icon": {
                    "light": "resources/vscode-icons/light/clear-all.svg",
                    "dark": "resources/vscode-icons/dark/clear-all.svg"
                }
            },
            {
                "command": "karateIDE.karateNetworkLogs.showScenarios.true",
                "title": "Show Scenarios",
                "icon": {
                    "light": "resources/vscode-icons/light/list-tree.svg",
                    "dark": "resources/vscode-icons/dark/list-tree.svg"
                }
            },
            {
                "command": "karateIDE.karateNetworkLogs.showScenarios.false",
                "title": "Hide Scenarios",
                "icon": {
                    "light": "resources/vscode-icons/light/list-unordered.svg",
                    "dark": "resources/vscode-icons/dark/list-unordered.svg"
                }
            },
            {
                "command": "karateIDE.karateNetworkLogs.copyAsPayload",
                "title": "Copy value"
            },
            {
                "command": "karateIDE.karateNetworkLogs.copyAsPath",
                "title": "Copy as expression"
            },
            {
                "command": "karateIDE.karateNetworkLogs.copyAsCURL",
                "title": "Copy as cURL"
            },
            {
                "command": "karateIDE.karateNetworkLogs.copyAsKarateMock",
                "title": "Copy as Karate Mock"
            },
            {
                "command": "karateIDE.tests.refreshTree",
                "title": "Refresh",
                "icon": {
                    "light": "resources/vscode-icons/light/refresh.svg",
                    "dark": "resources/vscode-icons/dark/refresh.svg"
                }
            },
            {
                "command": "karateIDE.tests.switchKarateEnv",
                "title": "Karate Env",
                "icon": {
                    "light": "resources/vscode-icons/light/gear.svg",
                    "dark": "resources/vscode-icons/dark/gear.svg"
                }
            },
            {
                "command": "karateIDE.tests.configureFocus",
                "title": "Config Focus",
                "icon": {
                    "light": "resources/vscode-icons/light/filter.svg",
                    "dark": "resources/vscode-icons/dark/filter.svg"
                }
            },
            {
                "command": "karateIDE.tests.open",
                "title": "Open In Editor",
                "icon": {
                    "light": "resources/vscode-icons/light/go-to-file.svg",
                    "dark": "resources/vscode-icons/dark/go-to-file.svg"
                }
            },
            {
                "command": "karateIDE.tests.runAll",
                "title": "Run All Tests",
                "icon": {
                    "light": "resources/vscode-icons/light/run-all.svg",
                    "dark": "resources/vscode-icons/dark/run-all.svg"
                }
            },
            {
                "command": "karateIDE.tests.debugAll",
                "title": "Debug All Tests",
                "icon": {
                    "light": "resources/vscode-icons/light/debug-alt-small.svg",
                    "dark": "resources/vscode-icons/dark/debug-alt-small.svg"
                }
            },
            {
                "command": "karateIDE.karateExecutionsTree.relaunchDebugAll",
                "title": "Relaunch Last Karate Debug Execution",
                "icon": {
                    "light": "resources/vscode-icons/light/debug-alt-small.svg",
                    "dark": "resources/vscode-icons/dark/debug-alt-small.svg"
                }
            },
            {
                "command": "karateIDE.karateExecutionsTree.relaunchDebug",
                "title": "Debug this Execution",
                "icon": {
                    "light": "resources/vscode-icons/light/debug-alt-small.svg",
                    "dark": "resources/vscode-icons/dark/debug-alt-small.svg"
                }
            },
            {
                "command": "karateIDE.karateExecutionsTree.relaunchRunAll",
                "title": "Relaunch Last Karate Run Execution",
                "icon": {
                    "light": "resources/vscode-icons/light/run-all.svg",
                    "dark": "resources/vscode-icons/dark/run-all.svg"
                }
            },
            {
                "command": "karateIDE.karateExecutionsTree.relaunchRun",
                "title": "Run this Execution",
                "icon": {
                    "light": "resources/vscode-icons/light/run-all.svg",
                    "dark": "resources/vscode-icons/dark/run-all.svg"
                }
            },
            {
                "command": "karateIDE.generators.openapi.test",
                "title": "Generate Karate Test",
                "icon": {
                    "light": "resources/vscode-icons/light/karate-test.svg",
                    "dark": "resources/vscode-icons/dark/karate-test.svg"
                }
            },
            {
                "command": "karateIDE.generators.openapi.mocks",
                "title": "Generate Karate Mock",
                "icon": {
                    "light": "resources/vscode-icons/light/karate-test.svg",
                    "dark": "resources/vscode-icons/dark/karate-test.svg"
                }
            },
            {
                "command": "karateIDE.mocks.start",
                "title": "Start Karate Mock Server",
                "icon": {
                    "light": "resources/vscode-icons/light/karate-test.svg",
                    "dark": "resources/vscode-icons/dark/karate-test.svg"
                }
            }
        ],
        "menus": {
            "view/title": [
                {
                    "command": "karateIDE.tests.refreshTree",
                    "when": "view == karate-tests",
                    "group": "navigation@1"
                },
                {
                    "command": "karateIDE.tests.switchKarateEnv",
                    "when": "view == karate-tests",
                    "group": "navigation@3"
                },
                {
                    "command": "karateIDE.tests.configureFocus",
                    "when": "view == karate-tests",
                    "group": "navigation@4"
                },
                {
                    "command": "karateIDE.karateNetworkLogs.showScenarios.false",
                    "when": "view == karate-network-logs",
                    "group": "navigation@1"
                },
                {
                    "command": "karateIDE.karateNetworkLogs.showScenarios.true",
                    "when": "view == karate-network-logs",
                    "group": "navigation@2"
                },
                {
                    "command": "karateIDE.karateNetworkLogs.clearTree",
                    "when": "view == karate-network-logs",
                    "group": "navigation@3"
                },
                {
                    "command": "karateIDE.karateExecutionsTree.relaunchDebugAll",
                    "when": "view == karate-executions",
                    "group": "navigation"
                },
                {
                    "command": "karateIDE.karateExecutionsTree.relaunchRunAll",
                    "when": "view == karate-executions",
                    "group": "navigation"
                }
            ],
            "view/item/context": [
                {
                    "command": "karateIDE.tests.debugAll",
                    "when": "view == karate-tests && viewItem =~ /^testFile$|^testDirectory$/",
                    "group": "inline@1"
                },
                {
                    "command": "karateIDE.tests.runAll",
                    "when": "view == karate-tests && viewItem =~ /^testFile$|^testDirectory$/",
                    "group": "inline@2"
                },
                {
                    "command": "karateIDE.tests.debug",
                    "when": "view == karate-tests && viewItem == test",
                    "group": "inline@1"
                },
                {
                    "command": "karateIDE.tests.run",
                    "when": "view == karate-tests && viewItem == test",
                    "group": "inline@2"
                },
                {
                    "command": "karateIDE.tests.open",
                    "when": "view == karate-tests && viewItem =~ /^testFile$|^file$/",
                    "group": "inline@3"
                },
                {
                    "command": "karateIDE.karateExecutionsTree.relaunchDebug",
                    "when": "view == karate-executions",
                    "group": "inline@1"
                },
                {
                    "command": "karateIDE.karateExecutionsTree.relaunchRun",
                    "when": "view == karate-executions",
                    "group": "inline@2"
                },
                {
                    "command": "karateIDE.tests.open",
                    "when": "view == karate-executions",
                    "group": "inline@3"
                },
                {
                    "command": "karateIDE.karateNetworkLogs.copyAsPayload",
                    "when": "view == karate-network-logs && viewItem =~ /^NetworkLogPayload.*/",
                    "group": "copyas@2"
                },
                {
                    "command": "karateIDE.karateNetworkLogs.copyAsPath",
                    "when": "view == karate-network-logs && viewItem =~ /^NetworkLogPayload.+/",
                    "group": "copyas@2"
                },
                {
                    "command": "karateIDE.karateNetworkLogs.copyAsCURL",
                    "when": "view == karate-network-logs && viewItem =~ /^NetworkLogRequest$|^NetworkRequestResponseLog$/",
                    "group": "copyas@1"
                },
                {
                    "command": "karateIDE.karateNetworkLogs.copyAsKarateMock",
                    "when": "view == karate-network-logs && viewItem =~ /^NetworkLogResponse$|^NetworkRequestResponseLog$/",
                    "group": "copyas@1"
                }
            ],
            "explorer/context": [
                {
                    "when": "resourceLangId == yaml",
                    "command": "karateIDE.generators.openapi.test",
                    "group": "karate@1"
                },
                {
                    "when": "resourceLangId == yml",
                    "command": "karateIDE.generators.openapi.test",
                    "group": "karate@1"
                },
                {
                    "when": "resourceLangId == yaml",
                    "command": "karateIDE.generators.openapi.mocks",
                    "group": "karate@2"
                },
                {
                    "when": "resourceLangId == yml",
                    "command": "karateIDE.generators.openapi.mocks",
                    "group": "karate@2"
                },
                {
                    "when": "resourceLangId == karate",
                    "command": "karateIDE.mocks.start",
                    "group": "karate@3"
                }
            ],
            "editor/title": [
                {
                    "when": "resourceLangId == yaml",
                    "command": "karateIDE.generators.openapi.test",
                    "group": "karate@1"
                },
                {
                    "when": "resourceLangId == yml",
                    "command": "karateIDE.generators.openapi.test",
                    "group": "karate@1"
                },
                {
                    "when": "resourceLangId == yaml",
                    "command": "karateIDE.generators.openapi.mocks",
                    "group": "karate@2"
                },
                {
                    "when": "resourceLangId == yml",
                    "command": "karateIDE.generators.openapi.mocks",
                    "group": "karate@2"
                },
                {
                    "when": "resourceLangId == karate",
                    "command": "karateIDE.mocks.start",
                    "group": "karate@3"
                }
            ]
        },
        "configuration": {
            "type": "object",
            "title": "Karate IDE",
            "properties": {
                "karateIDE.multimodule.rootModuleMarkerFile": {
                    "type": "string",
                    "default": "pom.xml",
                    "description": "When using a multimodule project this file will be used to set the root of each module (i.e: pom.xml, build.gradle, karate.jar... ",
                    "scope": "resource"
                },
                "karateIDE.karateCli.addHookToClasspath": {
                    "type": "boolean",
                    "default": "true",
                    "description": "Karate comunicates with this vscode extension throught a karate RuntimeHook. If you preffer you can add this manually, see documentation. Would you like to add this atomatically to command line classpath?",
                    "scope": "resource"
                },
                "karateIDE.karateCli.m2Repo": {
                    "type": "string",
                    "description": "This value will replace `${m2.repo}` placeholder in `karateIDE.karateCli.classpath` config value. Default as `${MAVEN_HOME}/.m2/repository` if env variable is available.",
                    "scope": "resource"
                },
                "karateIDE.karateCli.karateOptions": {
                    "type": "string",
                    "default": "",
                    "description": "Karate Options to be set in command templates, for e.g. '-t ~@ignore -T 5'. If [karateIDE.karateCli.addHookToClasspath] is set to 'false' you must manually include '-H vscode.VSCodeHook' or equivalent hook.",
                    "scope": "resource"
                },
                "karateIDE.karateCli.karateEnv": {
                    "type": "string",
                    "default": "",
                    "description": "karate.env system property value to be set in command templates.",
                    "scope": "resource"
                },
                "karateIDE.karateCli.classpath": {
                    "type": "string",
                    "default": "karate.jar",
                    "description": "Classpath expression to be set in command line templates. See documentation for different classpath recipies.",
                    "scope": "resource"
                },
                "karateIDE.karateCli.runCommandTemplate": {
                    "type": "string",
                    "default": "java '-Dkarate.env=${karateEnv}' '-Dvscode.port=${vscodePort}' -cp '${classpath}' com.intuit.karate.Main ${karateOptions} '${feature}'",
                    "description": "Command line template for run action. See documentation for available template variables and different recipies.",
                    "scope": "resource"
                },
                "karateIDE.karateCli.debugCommandTemplate": {
                    "type": "string",
                    "default": "java '-Dkarate.env=${karateEnv}' '-Dvscode.port=${vscodePort}' -cp '${classpath}' com.intuit.karate.Main -d",
                    "description": "Command line template for debug action. See documentation for available template variables and different recipies.",
                    "scope": "resource"
                },
                "karateIDE.karateCli.mockServerCommandTemplate": {
                    "type": "string",
                    "default": "java -cp '${classpath}' com.intuit.karate.Main -m '${feature}' -p ${port}",
                    "description": "Command line template for starting a mock server. See documentation for available template variables and different recipies.",
                    "scope": "resource"
                },
                "karateIDE.karateTestRunner.karateJunitRunner": {
                    "type": "string",
                    "default": "KarateJunitRunner",
                    "description": "Karate Junit Runner to use for running Karate tests (only if specified in run command template).",
                    "scope": "resource"
                },
                "karateIDE.karateTestRunner.promptToSpecify": {
                    "type": "boolean",
                    "default": true,
                    "description": "Prompt to specify Karate Junit Runner before running Karate tests (only if specified in run command template).",
                    "scope": "resource"
                },
                "karateIDE.tests.globFilter": {
                    "type": "string",
                    "default": "**/src/test/**/*[.feature|.yml]",
                    "description": "Glob pattern to filter files in Karate Tests view.",
                    "scope": "resource"
                }
            }
        },
        "breakpoints": [
            {
                "language": "karate"
            }
        ],
        "debuggers": [
            {
                "type": "karate-ide",
                "label": "Karate IDE (debug)",
                "configurationAttributes": {
                    "launch": {
                        "required": [],
                        "properties": {}
                    }
                }
            }
        ],
        "keybindings": [
            {
                "command": "karateIDE.paste",
                "key": "Ctrl+V",
                "linux": "Ctrl+Shift+V",
                "mac": "Cmd+V",
                "when": "editorTextFocus"
            },
            {
                "command": "karateIDE.tests.run",
                "args": null,
                "key": "Ctrl+R Ctrl+1",
                "linux": "Ctrl+Shift+R Ctrl+Shift+1",
                "mac": "Cmd+R Cmd+1",
                "when": "editorTextFocus && editorLangId == karate"
            },
            {
                "command": "karateIDE.tests.runAll",
                "args": null,
                "key": "Ctrl+R Ctrl+A",
                "linux": "Ctrl+Shift+R Ctrl+Shift+A",
                "mac": "Cmd+R Cmd+A",
                "when": "editorTextFocus && editorLangId == karate"
            },
            {
                "command": "karateIDE.tests.debug",
                "args": null,
                "key": "Ctrl+D Ctrl+1",
                "linux": "Ctrl+Shift+D Ctrl+Shift+1",
                "mac": "Cmd+D Cmd+1",
                "when": "editorTextFocus && editorLangId == karate"
            },
            {
                "command": "karateIDE.tests.debugAll",
                "args": null,
                "key": "Ctrl+D Ctrl+A",
                "linux": "Ctrl+Shift+D Ctrl+Shift+A",
                "mac": "Cmd+D Cmd+A",
                "when": "editorTextFocus && editorLangId == karate"
            }
        ],
        "languages": [
            {
                "id": "karate",
                "aliases": [
                    "Karate",
                    "karate"
                ],
                "extensions": [
                    ".feature"
                ],
                "configuration": "./syntaxes/karate-language-configuration.json"
            },
            {
                "id": "karate-json",
                "configuration": "./syntaxes/karate-json-language-configuration.json"
            }
        ],
        "grammars": [
            {
                "language": "karate",
                "scopeName": "source.karate",
                "path": "./syntaxes/karate.tmLanguage.json",
                "embeddedLanguages": {
                    "meta.embedded.block.javascript": "javascript",
                    "meta.embedded.block.json": "karate-json",
                    "meta.embedded.block.xml": "xml"
                }
            },
            {
                "language": "karate-json",
                "scopeName": "source.json.karate",
                "path": "./syntaxes/karate-json.tmLanguage.json"
            },
            {
                "scopeName": "source.js.karate",
                "path": "./syntaxes/karate-js.tmLanguage.json",
                "injectTo": [
                    "source.js",
                    "source.karate"
                ]
            }
        ]
    }
}
