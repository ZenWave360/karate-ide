Feature: <%= operation.summary %>
	<%= operation.description %>

Background:
* url baseUrl
# You may read this inlineRequest as request/response documentation o use it for quick exploratory testing
* def inlineRequest =
"""
<%- inlineRequest %>
"""

@ignore @inline
Scenario: explore <%= operation.operationId %> inline
	You may use this test for quick API exploratorial purposes.
	* call read('<%= operation.operationId %>.feature@operation') inlineRequest

Scenario Outline: Test <%= operation.operationId %> for <status> status code
	* def req = read(<testDataFile>)
	* def result = call read('<%= operation.operationId %>.feature@operation') req
	* match result.responseStatus == <status>
		Examples:
		| status | testDataFile |
<%_
		for(const statusCode in operation.responses) {
			if(statusCode == 500) {
				continue;
			}
			const response = operation.responses[statusCode];
		_%>
		| <%= statusCode %> | 'test-data/<%= operation.operationId %>_<%= statusCode %>.yml' |
		<%_
		}
_%>


<%_
	function isArraySchema(schema) {
    	const type = Array.isArray(schema.type) ? schema.type[0] : schema.type;
    	return type === 'array';
	}
	const responseSchema = operation.responseBody? Object.values(operation.responses[operation.responseCode].content)[0].schema : null;
_%>

@ignore @operation
Scenario: <%= operation.operationId %>
* def req = __arg
* def authHeader = call read('classpath:karate-auth.js') req.auth
* def headers = karate.merge(req.headers || {}, authHeader || {})
Given path <%- ["'", operation.path, "'"].join('').replace(/{/g, "', req.params.").replace(/}/g, ", '").replace(/, ''/, '') %>
<%_ if(Object.keys(operation.queryParams).length) { _%>
	<%_ for(param of Object.values(operation.queryParams)) { _%>
And param <%= param.name %> = req.params.<%= param.name %>
	<%_	} _%>
<%_	} _%>
And headers headers
<%_	if(operation.requestBody) { _%>
And request req.body
<%_ } _%>
When method <%= operation.method.toUpperCase() %>

* if (req.matchResponse === true) karate.call('<%= operation.operationId %>.feature@validate')

@ignore @validate
Scenario: validate <%= operation.operationId %>

* def expectedStatusCode = req.statusCode || responseStatus
* match responseStatus == expectedStatusCode
<% if (operation.responseBody) { _%>

# match response schema in 'test-data' or any object
* def responseContains = req.matchResponse === true? req.responseMatch : responseType == 'json'? {} : ''
* match <% if(isArraySchema(responseSchema)) { %> each <% } %> response contains responseContains

<%_
	// console.log('operation.responseBody', responseSchema)
    Object.entries(responseSchema.properties || {}).forEach(([property, schema]) => {
		if(isArraySchema(schema)) {
_%>
# validate nested array: <%= property %>
* def <%= property %>_EachContains = req.matchResponse === true && req.responseMatchesEach && req.responseMatchesEach.<%= property %>? req.responseMatchesEach.<%= property %> : {}
* def <%= property %>_Response = response.<%= property %> || []
* match each <%= property %>_Response contains <%= property %>_EachContains
<%_
		}
    });
_%>
<%_ } _%>
